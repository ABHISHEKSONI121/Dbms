{"ast":null,"code":"var _jsxFileName = \"/Users/Abhishek/Desktop/Dbms/frontend/src/services/auth-guard-services.js\";\nimport React from 'react';\nimport { useNavigate, Navigate } from 'react-router-dom';\nimport { useAuth } from '../services/auth-services'; // Import your auth service or hook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst withAuthGuard = Component => {\n  var _s = $RefreshSig$();\n  return _s(props => {\n    _s();\n    const navigate = useNavigate();\n    const isAuthenticated = useAuth(); // Replace this with your own function to check if the user is authenticated\n\n    // Check authentication status\n    if (!isAuthenticated) {\n      console.log('User is not logged in. Redirecting to login.');\n      // Redirect to login page if not authenticated\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 20\n      }, this);\n    } else {\n      console.log('User is logged in. Allowing access.');\n      // If authenticated, render the wrapped component\n      return /*#__PURE__*/_jsxDEV(Component, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 20\n      }, this);\n    }\n  }, \"LzXVRu7juGAaQbTUaqBgQ7YnY2c=\", false, function () {\n    return [useNavigate, useAuth];\n  });\n};\nexport default withAuthGuard;","map":{"version":3,"names":["React","useNavigate","Navigate","useAuth","jsxDEV","_jsxDEV","withAuthGuard","Component","_s","$RefreshSig$","props","navigate","isAuthenticated","console","log","to","replace","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/Abhishek/Desktop/Dbms/frontend/src/services/auth-guard-services.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate, Navigate } from 'react-router-dom';\nimport { useAuth } from '../services/auth-services'; // Import your auth service or hook\n\nconst withAuthGuard = (Component) => {\n    return (props) => {\n        const navigate = useNavigate();\n        const isAuthenticated = useAuth(); // Replace this with your own function to check if the user is authenticated\n\n        // Check authentication status\n        if (!isAuthenticated) {\n            console.log('User is not logged in. Redirecting to login.');\n            // Redirect to login page if not authenticated\n            return <Navigate to=\"/login\" replace />;\n        } else {\n            console.log('User is logged in. Allowing access.');\n            // If authenticated, render the wrapped component\n            return <Component {...props} />;\n        }\n    };\n};\n\nexport default withAuthGuard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,aAAa,GAAIC,SAAS,IAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACjC,OAAAD,EAAA,CAAQE,KAAK,IAAK;IAAAF,EAAA;IACd,MAAMG,QAAQ,GAAGV,WAAW,CAAC,CAAC;IAC9B,MAAMW,eAAe,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEnC;IACA,IAAI,CAACS,eAAe,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D;MACA,oBAAOT,OAAA,CAACH,QAAQ;QAACa,EAAE,EAAC,QAAQ;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC3C,CAAC,MAAM;MACHP,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD;MACA,oBAAOT,OAAA,CAACE,SAAS;QAAA,GAAKG;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnC;EACJ,CAAC;IAAA,QAboBnB,WAAW,EACJE,OAAO;EAAA;AAavC,CAAC;AAED,eAAeG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}